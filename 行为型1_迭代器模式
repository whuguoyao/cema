/******************************************** main.cpp ********************************************/
#include "stdafx.h"
#include <iostream>
#include <vector>
using namespace std;

template <class Item>
class CIterator {
public:
	virtual void First() = 0;
	virtual void Next() = 0;
	virtual bool IsEnd() = 0;
	virtual Item *GetItem() = 0;
};

template <class Item>
class CConcreteAggregate;

template <class Item>
class CConcreteIterator :public CIterator<Item> {
public:
	CConcreteIterator(CConcreteAggregate<Item> *pAggr):m_pAggr(pAggr),m_curPos(0) {};
	inline virtual void First() { m_curPos = 0; }
	inline virtual void Next() { if (m_curPos < m_pAggr->GetLength()) ++m_curPos;}
	inline virtual bool IsEnd() { return m_curPos >= m_pAggr->GetLength(); }
	Item *GetItem() {
		if (IsEnd() ) return NULL;
		return &(*m_pAggr)[m_curPos];
	}
protected:
	int m_curPos;     //下标
	CConcreteAggregate<Item> *m_pAggr;
};

template <class Item>
class CAggregate {
public:
	CAggregate() {}
	virtual ~CAggregate() {};
	virtual CIterator<Item> *CreateIterator() = 0;
	virtual void ReleaseIterator(CIterator<Item> **p) = 0;
};

template<class Item>
class CConcreteAggregate :public CAggregate<Item> {
public:
	CConcreteAggregate(vector<Item> vec) {
		for (int i = 0; i < (int)vec.size(); ++i)
			m_vecIter.push_back(vec[i]);
	}
	inline int GetLength() { return m_vecIter.size(); }
	Item &operator[](int index) { return m_vecIter[index]; }

	CIterator<Item> *CreateIterator() { return new CConcreteIterator<Item>(this); }
	void ReleaseIterator(CIterator<Item> **p) { delete (*p);  (*p) = NULL; }
protected:
	vector<Item>  m_vecIter;
};



void main(){
	vector<int> vec(5,10);
	CAggregate<int> *pAggr = new CConcreteAggregate<int>(vec);
	CIterator<int>  *pIter = pAggr->CreateIterator();

	for (pIter->First(); !pIter->IsEnd(); pIter->Next()) {
		cout << *(pIter->GetItem()) << " ";
	}    
	cout << endl;

	pAggr->ReleaseIterator(&pIter);
	delete pAggr;   pAggr = NULL;
	system("pause");
}
